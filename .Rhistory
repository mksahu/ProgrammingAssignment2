x <- 1:10
x
class(x)
x > 5
if(x > 5) {}
if(x > 5) {
x <- 0
}
x
if(x > 5) {
x[1] <- 0
}
x > 5
class(x > 5)
y
x <- 1:10
class(x > 5)
x
if(x > 5) {
y <- 0
}
if(x[2] > 5) {
x <- 0
}
x
if(x[6] > 5) {
x <- 0
}
x
if(x > 5) {
x <- 1
}
x
if(x < 5) {
x <- 1
}
x
airquality
x
args(mean)
args(mean)
mean(x)
x <- c(1,2,3)
x
mean(x)
x <- c(1,2,3, "NA")
x
x <- c(1,2,3, NA)
x
mean(x)
mean(x, TRUE)
mean(x, na.rm=TRUE)
x <- c(1,2,3, "NA")
x
mean(x, na.rm=TRUE)
x <- c(1,2,3,4)
y <- x>1
y
if x[2] == 2 {
mean(x[y])
}
x <- c(1,2,3,4)
y <- x>1
y
if (x[2] == 2) {
mean(x[y])
}
x[y]
mean
search()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
z
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
print(z)
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
y
x <- 5
y <-if (x < 3) {
NA
} else {
10
}
y
x <- matrix(1:4,2,2)
x
x <- matrix(1:4,2:2)
x
x <- matrix(1:4,1:2)
x
frame(1:4,1:2)
x <- frame(1:4,1:2)
x
frame(1:4,2)
x <- c(1:4,1:2)
x
x <- matrix(1:6,1:2)
x
x <- matrix(1:6)
x
x <- matrix(1:6,2)
x
x <- matrix(1:6,2,2)
x
y <- matrix(rep(10,4), 2,2)
y
z <- rep(10,4)
z
x * y
x
x %*% y
y
x
y
x %*% y
getwd()
load("~/.Rhistory")
getwd()
getwd()
setwd("~/")
load("C:/workspace/training/Coursera/DataScientist/work/.Rhistory")
q()
setwd("C:/workspace/training/Coursera/DataScientist/work_git/rprog/ProgrammingAssignment2")
dir()
source("cachematrix.R")
source("cachematrix.R")
m <- makeCacheMatrix()
m$get()
cacheSolve(m)
m.cacheSolve()
a <- matrix(nrow=2, ncol=2,c(3,2,7,6))
m$set(a)
m$get()
b <- cacheSolve(m)
b
round(a %*% b, 10)
c <- matrix(nrow=2, ncol=2,c(4,2,7,6))
n
n <- makeCacheMatrix(c)
n
n$get()
d <- cacheSolve(n)
d <- cacheSolve(n)
d
round(c %*% d, 10)
dir()
a <- matrix(nrow=2, ncol=2,c(4,2,7,6))
a == c
identical(a,c)
!identical(a,c)
d
d <- cacheSolve(n)
n$get()
a
n$set(a)
d <- cacheSolve(n)
d <- cacheSolve(n)
n$set(c)
d <- cacheSolve(n)
d <- cacheSolve(n)
source("cachematrix.R")
source("cachematrix.R")
n$set(c)
d <- cacheSolve(n)
d <- cacheSolve(n)
n$set(c)
d <- cacheSolve(n)
m <- makeCacheMatrix(c)
d <- cacheSolve(n)
m$get()
a
c
identical(a,c)
m$get()
m$get(a)
m$set(a)
m$get()
d <- cacheSolve(n)
